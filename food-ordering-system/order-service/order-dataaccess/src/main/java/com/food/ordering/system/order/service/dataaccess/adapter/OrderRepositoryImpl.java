package com.food.ordering.system.order.service.dataaccess.adapter;

import com.food.ordering.system.order.service.domain.entity.Order;
import com.food.ordering.system.order.service.dataaccess.entity.OrderEntity;
import com.food.ordering.system.order.service.dataaccess.mapper.OrderJpaMapper;
import com.food.ordering.system.order.service.domain.ports.output.OrderRepository;
import com.food.ordering.system.order.service.dataaccess.repository.OrderJpaRepository;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class OrderRepositoryImpl implements OrderRepository {
    //JPARepository-generated by SpringData
    private final OrderJpaRepository orderJpaRepository;
    //Mapper:DomainEntity<->JPAEntity
    private final OrderJpaMapper mapper;

    public OrderRepositoryImpl(OrderJpaRepository orderJpaRepository, OrderJpaMapper mapper) {
        this.orderJpaRepository = orderJpaRepository;
        this.mapper = mapper;
    }

    /**
     *ADAPTERPATTERN
     *
     *Transformations:
     *DomainOrder->JPAOrderEntity->Database
     *Database->JPAOrderEntity->DomainOrder
     */
    @Override
    public Order save(Order order){
        //Step1:Domain->JPAEntity
        OrderEntity orderEntity=mapper
                .orderToOrderEntity(order);
        //Step2:Save to database
        OrderEntity savedEntity=orderJpaRepository.save(orderEntity);
        //Step3:JPAEntity->Domain
        return mapper
                .orderEntityToOrder(savedEntity);
    }

    @Override
    public List<Order> getOrderByCustomerId(UUID customerId){
        List<OrderEntity> orderEntities = orderJpaRepository.findByCustomerId(customerId);
        return orderEntities.stream().map(orderEntity ->
                        mapper.orderEntityToOrder(orderEntity))
                .collect(Collectors.toList());
    }

    @Override
    public long getTotalOrders(){
        return orderJpaRepository.getTotalOrders();
    }

    @Override
    public BigDecimal calculateTotalRevenue(){
        return orderJpaRepository.calculateTotalRevenue();
    }

    @Override
    public BigDecimal calculateAvgOrderValue(){
        return orderJpaRepository.calculateAvgOrderValue();
    }
    //    @Override
//    public Optional<Order>findById(OrderId orderId){
//        return orderJpaRepository
//                .findById(orderId.getValue())
//                .map(orderDataAccessMapper::orderEntityToOrder);
//    }
//
    @Override
    public Optional<Order> findByTrackingId(UUID trackingId){
        return orderJpaRepository
                .findByTrackingId(trackingId)
                .map(mapper::orderEntityToOrder);
    }
}
